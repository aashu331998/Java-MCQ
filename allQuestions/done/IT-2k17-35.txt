[[
[{
q:"1.concurrentSkipListMap allows",
opt1:"one null key",
opt2:"many null key",
opt3:"both of the above",
opt4:"none of the above",
ans:"4",
}],
[{
q:"2.Which of these is synchronized and doesn't allow null elements?",
opt1:"CopyOnWriteArraylist",
opt2:"Vector",
opt3:"CopyOnWriteArraySet",
opt4:"ConcurrentSkipListSet",
ans:"4",
}],
[{
q:"3.An attempt to add null key to a TreeMap will result in:",
opt1:"Compile time exception",
opt2:"Error",
opt3:"Runtime-NullPointerException",
opt4:"None",
ans:"3",
}],
[{
q:"4.Which of the following method you need to override for using an object as key in a HashMap?",
opt1:"hashKey()",
opt2:"hashValue()",
opt3:"hashCode()",
opt4:"None",
ans:"3",
}],
[{
q:"5.What is the time complexity for add(index, element) in ArrayList?",
opt1:"O(1)",
opt2:"O(log(n))",
opt3:"O(n)",
opt4:"O(nlog(n))",
ans:"3",
}],
[{
q:"6.What is the time complexity for put() in TreeMap?",
opt1:"O(1)",
opt2:"O(log(n))",
opt3:"O(n)",
opt4:"O(nlog(n))",
ans:"2",
}],
[{
q:"7.Which of these packages contain all the collection classes?",
opt1:"java.lang",
opt2:"java.util",
opt3:"java".net,
opt4:"java.awt",
ans:"2"
}],
[{
q:"8.Which of these classes is not part of Java’s collection framework?",
opt1:"Maps",
opt2:"Arrays",
opt3:"Stack",
opt4:"Queue",
ans:"4",
}],
[{
q:"9. Which of these interface is not a part of Java’s collection framework?",
opt1:"List",
opt2:"Set",
opt3:"SortedMap",
opt4:"SoretdList",
ans:"4",
}],
[{
q:"10.Each tree based collection assumes its elements to be of --- type?",
opt1:"Serializable",
opt2:"Comparable",
opt3:"Comparator",
opt4:"Sortable",
ans:"opt2"
}],
[{
q:"11.What will be the result of the following statement?
TreeSet set = Collections.singleton("one");",
opt1:"  A singleton set will be created. ",
opt2:"  ClassCastException will be thrown   ",
opt3:"The statement will not compile",
opt4:"return a value",
ans:"opt3"
}],
[{
q:"12. Which of these methods deletes all the elements from invoking collection?",
opt1:"clear()",
opt2:"reset()",
opt3:"delete()",
opt4:"refresh()",
ans:"1",
}],
[{
q:"13. What is Collection in Java?",
opt1:"A group of objects",
opt2:"A group of classe",
opt3:"A group of interfaces",
opt4:"None of the mentioned",
ans:"1",
}],
[{
q:"14. Which of these interface declares core method that all collections will have?",
opt1:"set",
opt2:"EventListner",
opt3:"Comparator",
opt4:"Collection",
ans:"4",
}],
[{
q:"15. Which of these interface must contain a unique element?",
opt1:"Set",
opt2:"LIst",
opt3:"Array",
opt4:"Collection",
ans:"1",
}],
[{
q:"16. Which of these is Basic interface that all other interface inherits?",
opt1:"Set",
opt2:"Array",
opt3:"List",
opt4:"Collection",
ans:"4",
}],
[{
q:"17.It allows the elements to be ordered in FIFO",
opt1:"PriorityBlockingQueue",
opt2:"ArrayBlockingQueue",
opt3:"none",
opt4:"Both",
ans:"opt2"
}],
[{
q:"18. Which of these methods sets every element of a List to a specified object?",
opt1:"set()",
opt2:"fill()",
opt3:"Complete()",
opt4:"add()",
ans:"2",
}],
[{
q:"19. Which of these methods can randomize all elements in a list?",
opt1:"rand()",
opt2:"randomize()",
opt3:"shuffle()",
opt4:"ambigous()",
ans:"3",
}],
[{
q:"20. Which of these methods can convert an object into a List?",
opt1:"SetList()",
opt2:"ConvertList()",
opt3:"singletonList()",
opt4:"CopyList()",
ans:"3",
}],
[{
q:"21. Which of these is true about unmodifiableCollection() method?",
opt1:"unmodifiableCollection() returns a collection that cannot be modified.",
opt2:"unmodifiableCollection() method is available only for List and Set.",
opt3:"unmodifiableCollection() is defined in Collection class.",
opt4:"None of the above",
ans:"2",
}],
[{
q:"22. Which of these is static variable defined in Collections?",
opt1:"EMPTY_SET",
opt2:"EMPYT_LIST",
opt3:"EMPYT_MAP",
opt4:"all of the above",
ans:"4",
}],
[{
q:"23.In Iterator, hasMoreElements() method of Enumeration has been changed to:",
opt1:"hasNextElement()",
opt2:"isNext()",
opt3:"hasNext()",
opt4:"name remains same",
ans:"3",
}],
[{
q:"24.Iterator returned by Hashtable on key, value and entry is?",
opt1:"Fail-fast",
opt2:"Fail-safe",
opt3:"None",
opt4:"Both",
ans:"1",
}],
[{
q:"25.What is initial capacity of LinkedList?",
opt1:"8",
opt2:"10",
opt3:"18",
opt4:"14",
ans:"2",
}],
[{
q:"26.Can 2 threads on same ConcurrentHashMap object access it concurrently",
opt1:"we need to add additional functionality to achieve the same",
opt2:"Its not possible",
opt3:"different threads can access different segments concurrently.",
opt4:"none of the above",
ans:"3",
}],
[{
q:"27.The default capacity of a Vector is",
opt1:"5",
opt2:"15",
opt3:"10",
opt4:"7",
ans:"3",
}],
[{
q:"28.Vector extends which of these",
opt1:"ArrayList",
opt2:"LinkedList",
opt3:"AbstractList",
opt4:"None",
ans:"3",
}],
[{
q:"29.What is NavigableMap",
opt1:"Describe an element(key/ value pair) in map",
opt2:"Handle the retrieval of entries based on closest match searches",
opt3:"Keys are maintain in ascending order",
opt4:"None of the above",
ans:"2",
}],
[{
q:"30.Which list is synchronized",
opt1:"Vector",
opt2:"CopyOnWriteArrayList",
opt3:"All",
opt4:"None",
ans:"3",
}],
[{
q:"31. An attempt to add null key to a TreeMap will result in:",
opt1:"Compile time Exception",
opt2:"Error",
opt3:"Runtime - NullPointerException",
opt4:"None",
ans:"3",
}],
[{
q:"32.How to make a collection read only?",
opt1:"Collections.unmodifiableList(list)",
opt2:"Collections.unmodifiableSet(set)",
opt3:"Collections.unmodifiableMap(map)",
opt4:"All of the above",
ans:"4",
}],
[{
q:"33.Which statement is true for the class java.util.HashSet?",
opt1:"The elements in the collection are ordered.",
opt2:"The collection is guaranteed to be immutable.",
opt3:"The elements in the collection are guaranteed to be unique.",
opt4:"The elements in the collection are accessed using a unique key.",
ans:"3",
}],
[{
q:"34.What does Collections.emptySet() return?",
opt1:"Immutable Set",
opt2:"Mutable Set",
opt3:"The type of Set depends on the parameter passed to the emptySet() method",
opt4:"Null object",
ans:"1,"
}],
[{
q:"35.What is the design pattern followed by Iterator?",
opt1:"None",
opt2:"Iterator design pattern",
opt3:"Factory design pattern",
opt4:"Observer design pattern",
ans:"2",
}],
[{
q:"36.What is the default clone of HashSet?",
opt1:"Deep clone",
opt2:"Shallow clone",
opt3:"Plain clone",
opt4:"Hollow clone",
ans:"2",
}],
[{
q:"37.Why were adhoc classes not reliable?",
opt1:"Couldn't be designed",
opt2:"Couldn't be extended",
opt3:"A and B",
opt4:"None",
ans:"3",
}],
[{
q:"38.What are the initial capacity and load factor of HashSet?",
opt1:"10, 1.0",
opt2:"32, 0.75",
opt3:"16, 0.75",
opt4:"32, 1.0",
ans:"3",
}],
[{
q:"39.What is the default value of load factor in a hashing based collection?",
opt1:"0.75",
opt2:"0.55",
opt3:"0.65",
opt4:"0.70",
ans:"1",
}],
[{
q:"40.Which of the below is not a subinterface of Queue?",
opt1:"BlockingQueue",
opt2:"BlockingEnque",
opt3:"TransferQueue",
opt4:"BlockingQueue",
ans:"2",
}],
[{
q:"41.Where does the new element be inserted in linked list implementation",
opt1:"Head of list",
opt2:"Tail of list",
opt3:"At the centre of list",
opt4:"All the old entries are pushed and then the new element is inserted",
ans:"2",
}],
[{
q:"42.If the size of the array used to implement circular queue is MAX_SIZE. How rear moves to traverse inorder to insert an element in the queue?",
opt1:"rear=(rear%1)+MAX_SIZE",
opt2:"rear=(rear+1)%MAX_SIZE",
opt3:"rear=rear+(1%MAX_SIZE)",
opt4:"rear=rear%(MAX_SIZE+1)",
ans:"2,"
}],
[{
q:"43 While finding the correct location for saving key value pair, how many times the key is hashed?",
opt1:"1",
opt2:"2",
opt3:"3",
opt4:"unlimited till bucket is found",
ans:"2",
}],
[{
q :"44.What does Collections.sort internally uses when number of elements are greater than 7?",
opt1:"Insertion sort",
opt2:"Merge sort",
opt3:"Quick sort",
opt4:"None",
ans:"2",
]},
[{
q:"45.Methods such as reverse, shuffle and sort are available in:",
opt1:"Object",
opt2:"Collection",
opt3:"Collections",
opt4:"Apache Commons Collections",
ans:"3",
}],
[{
q:"46.Deque and Queue are derived from:",
opt1:"AbstractList",
opt2:"Collection",
opt3:"AbstractCollection",
opt4:"List",
ans:"2",
}],
[{
q:"47.Vector extends which of these",
opt1:"ArrayList",
opt2:"LinkedList",
opt3:"AbstractList",
opt4:"None",
ans:"3,"
}],
[{
q:"48.From Java 5 onwards, which one of these is recommended to replace Hashtable?",
opt1:"ConcurrentHashMap",
opt2:"HashMap",
opt3:"ConcurrentHashTable",
opt4:"None",
ans:"1",
}],
[{
q:"49.A EnumSet",
opt1:"Can use enum and non enum type keys",
opt2:"Cannot use enum type keys",
opt3:"is specialized Set implementation for use with enum type keys only",
opt4:"None",
ans:"3",
}],
[{
q:"50.Which one is not EnumSet method?",
opt1:"allOf()",
opt2:"range()",
opt3:"add()",
opt4:"noneOf()",
ans:"3",
}],
],
[{rollNum:"IT-2K17-35"}]]

