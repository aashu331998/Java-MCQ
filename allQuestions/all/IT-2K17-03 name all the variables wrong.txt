[[
[{
q: "1. Which of these standard collection classes implements a dynamic array?",
opt1:" AbstractList",
opt2:" LinkedList",
opt3:"ArrayList",
opt4:" AbstractSet",
ans: "c",
}]
[{  
q: "2. Which of these class can generate an array which can increase and decrease in size automatically?
 opt:1"ArrayList()",
 opt:2” DynamicList()",
 opt:3” LinkedList()",
 opt:4” MallocList()",
ans: "a",
}]
[{  
q: "3. Which of these method can be used to increase the capacity of ArrayList object manually?",
 opt:1” Capacity()",
 opt:2” increaseCapacity()",
 opt:3” increasecapacity()",
 opt:4” ensureCapacity()",
 ans: "d",
}],
[{  
q: "4. Which of these method of ArrayList class is used to obtain present size of an object?",
 opt:1” size()",
 opt:2” length()",
 opt:3” index()",
 opt:4” capacity()",
  ans: "a",
}],
[{
q: "5. Which of these methods can be used to obtain a static array from an ArrayList object?",
 opt:1” Array()",
 opt:2” covertArray()",
 opt:3” toArray()",
 opt:4” covertoArray()",
 ans: "c",
}], 
[{  
q: "6. Which of these method is used to reduce the capacity of an ArrayList object?",
 opt:1” trim()",
 opt:2” trimSize()",
 opt:3” trimTosize()",
 opt:4” trimToSize()",
 ans: "d",
}], 
[{  
q: "7. What will be the output of the following Java program?

    import java.util.*;
    class Arraylist 
    {
        public static void main(String args[]) 
        {
            ArrayList obj = new ArrayList();
            obj.add("A");
            obj.add("B");
            obj.add("C");
            obj.add(1, "D");
            System.out.println(obj);
        }
    }",
 opt:1” [A, B, C, D]",
 opt:2” [A, D, B, C]",
 opt:3” [A, D, C]",
 opt:4” [A, B, C]",
 ans: "b",
}],
[{  
q: "8. What will be the output of the following Java program?

    import java.util.*;
    class Output 
    {
        public static void main(String args[]) 
        {
            ArrayList obj = new ArrayList();
            obj.add("A");
            obj.add(0, "B");
            System.out.println(obj.size());
        }
    }",
 opt:1” 0",
 opt:2” 1",
 opt:3” 2",
 opt:4” Any Garbage Value",
 ans: "c",
}], 
[{  
q: "9. What will be the output of the following Java program?

    import java.util.*;
    class Output 
    {
        public static void main(String args[]) 
        {
            ArrayList obj = new ArrayList();
            obj.add("A");
            obj.ensureCapacity(3);
            System.out.println(obj.size());
        }
    }",
 opt:1” 1",
 opt:2” 2",
 opt:3” 3",
 opt:4” 4",
ans: "a",
}], 
[{
q: "10. What will be the output of the following Java program?

    class Output 
    {
        public static void main(String args[]) 
        {
            ArrayList obj = new ArrayList();
            obj.add("A");
            obj.add("D");
            obj.ensureCapacity(3);
            obj.trimToSize();
            System.out.println(obj.size());
         }      
    }",
 opt:1” 1",
 opt:2” 2",
 opt:3” 3",
 opt:4” 4",
 ans: "b",
}], 
[{
q: "11. Map implements collection interface?",
 opt:1” True",
 opt:2” False",
ans:"b",
}]
[{
q: "12. Which of the below does not implement Map interface?",
 opt:1” HashMap",
 opt:2” Hashtable",
 opt:3” EnumMap",
 opt:4” Vector",
 ans: "d",  
}], 
[{
q: "13. What is the premise of equality for IdentityHashMap?",
 opt:1” Reference equality",
 opt:2” Name equality",
 opt:3” Hashcode equality",
 opt:4” Length equality",
 ans: "a",
}], 
[{ 
q: "14. What happens if we put a key object in a HashMap which exists?",
 opt:1” The new object replaces the older object",
 opt:2” The new object is discardeda",
 opt:3” The old object is removed from the map",
 opt:4” It throws an exception as the key already exists in the map",
 ans: "a",
}],
[{
q: "15. While finding the correct location for saving key value pair, how many times the key is hashed?",
 opt:1” 1",
 opt:2” 2",
 opt:3” 3",
 opt:4” unlimited till bucket is found",
 ans: "b",
}],
[{
q: "16. Is hashmap an ordered collection.",
 opt:1” True",
 opt:2” False",
 ans: "b",  
}],
[{
q: "17. If two threads access the same hashmap at the same time, what would happen?",
 opt:1” ConcurrentModificationException",
 opt:2” NullPointerException",
 opt:3” ClassNotFoundException",
 opt:4” RuntimeException",
 ans: "a",
}], 
[{
q: "18. How to externally synchronize hashmap?",
 opt:1” HashMap.synchronize(HashMap)",
 opt:2”HashMap a = new HashMap();
     a.synchronize();",
 opt:3” Collections.synchronizedMap(new HashMap<String, String>());",
 opt:4” Collections.synchronize(new HashMap<String, String>());",
 ans: "c",
}],
[{
q: "19. What will be the output of the following Java code snippet?

public class Demo
{
  public static void main(String[] args)
  {
		Map<Integer, Object> sampleMap = new TreeMap<Integer, Object>();
		sampleMap.put(1, null); 
		sampleMap.put(5, null); 
		sampleMap.put(3, null); 
		sampleMap.put(2, null); 
		sampleMap.put(4, null); 
 
       System.out.println(sampleMap);
   }
}",
 opt:1” {1=null, 2=null, 3=null, 4=null, 5=null}",
 opt:2” {5=null}",
 opt:3” Exception is thrown",
 opt:4” {1=null, 5=null, 3=null, 2=null, 4=null}",
 ans: "a",
}],
[{ 
q: "20. If large number of items are stored in hash bucket, what happens to the internal structure?",
 opt:1” The bucket will switch from LinkedList to BalancedTree",
 opt:2” The bucket will increase its size by a factor of load size defined",
 opt:3” The LinkedList will be replaced by another hashmap",
 opt:4” Any further addition throws Overflow exception",
 ans: "a",
}],
[{
q: "21. How can we remove an object from ArrayList?",
 opt:1” remove() method",
 opt:2” using Iterator",
 opt:3” remove() method and using Iterator",
 opt:4” delete() method",
 ans: "c",
}], 
[{ 
q: "22. How to remove duplicates from List?",
 opt:1” HashSet<String> listToSet = new HashSet<String>(duplicateList);",
 opt:2” HashSet<String> listToSet = duplicateList.toSet();",
 opt:3” HashSet<String> listToSet = Collections.convertToSet(duplicateList);",
 opt:4” HashSet<String> listToSet = duplicateList.getSet();",
 ans: "a",
}],
[{ 
q: "23. How to sort elements of ArrayList?",
 opt:1” Collection.sort(listObj);",
 opt:2” Collections.sort(listObj);",
 opt:3” listObj.sort();",
 opt:4” Sorter.sortAsc(listObj);",
 ans: "b",
}],
[{ 
q: "24. When two threads access the same ArrayList object what is the outcome of the program?",
 opt:1” Both are able to access the object",
 opt:2” ConcurrentModificationException is thrown",
 opt:3” One thread is able to access the object and second thread gets Null Pointer         exception",
 opt:4” One thread is able to access the object and second thread will wait till control is         passed to the second one",
 ans: "b",
}],
[{
q: "25. How is Arrays.asList() different than the standard way of initialising List?",
 opt:1” Both are same",
 opt:2” Arrays.asList() throws compilation error",
 opt:3” Arrays.asList() returns a fixed length list and doesn’t allow to add or remove         elements",
 opt:4” We cannot access the list returned using Arrays.asList()",
 ans: "c",
}],
[{
q: "26. What is the difference between length() and size() of ArrayList?",
 opt:1” length() and size() return the same value",
 opt:2” length() is not defined in ArrayList",
 opt:3” size() is not defined in ArrayList",
 opt:4” length() returns the capacity of ArrayList and size() returns the actual number of         elements stored in the list",
 ans: "d",
}],
[{ 
q: "27. Which class provides thread safe implementation of List?",
 opt:1” ArrayList",
 opt:2” CopyOnWriteArrayList",
 opt:3” HashList",
 opt:4” List",
 ans: "b",
}], 
[{ 
q: "28. Which of the below is not an implementation of List interface?",
 opt:1” RoleUnresolvedList",
 opt:2” Stack",
 opt:3” AttibuteList",
 opt:4” SessionList",
 ans: "d",
}],
[{ 
q: "29. What is the worst case complexity of accessing an element in ArrayList?",
 opt:1” O(n)",
 opt:2” O(1)",
 opt:3” O(nlogn)",
 opt:4” O(2)",
 ans: "b",
}], 
[{ 
q: "30. When an array is passed to a method, will the content of the array undergo changes with the actions carried within the function?",
 opt:1” True",
 opt:2” False",
 ans: "a", 
}], 
[{ 
q: "31. What is the default clone of HashSet?",
 opt:1” Deep clone",
 opt:2” Shallow clone",
 opt:3” Plain clone",
 opt:4” Hollow clone",
 ans: "b", 
}], 
[{ 
q: "32. Do we have get(Object o) method in HashSet.",
 opt:1” True",
 opt:2” False",
 ans: "b", 
}], 
[{ 
q: "33. What does Collections.emptySet() return?",
 opt:1” Immutable Set",
 opt:2” Mutable Set",
 opt:3” The type of Set depends on the parameter passed to the emptySet() method",
 opt:4” Null object",
 ans: "a",
}], 
[{ 
q: "34. What are the initial capacity and load factor of HashSet?",
 opt:1” 10, 1.0",
 opt:2” 32, 0.75",
 opt:3” 16, 0.75",
 opt:4” 32, 1.0",
 ans: "c", 
}], 
[{ 
q: "35. What is the relation between hashset and hashmap?",
 opt:1” HashSet internally implements HashMap",
 opt:2” HashMap internally implements HashSet",
 opt:3” HashMap is the interface; HashSet is the concrete class",
 opt:4” HashSet is the interface; HashMap is the concrete class",
 ans: "a", 
}],
[{ 
q: "36. What will be the output of the following Java code snippet?

public class Test 
{
	public static void main(String[] args) 
        {
		Set s = new HashSet();
		s.add(new Long(10));
		s.add(new Integer(10));
		for(Object object : s)
                {
		    System.out.println("test - "+object);
		}
	}
}",
 opt:1”

   Test - 10
   Test - 10",
 opt:2” Test – 10",
 opt:3” Runtime Exception",
 opt:4” Compilation Failure",
 ans: "a", 
}], 
[{ 
q: "37. Set has contains(Object o) method.",
 opt:1” True",
 opt:2” False",
 ans: "a", 
}], 
[{ 
q: "38. What is the difference between TreeSet and SortedSet?",
 opt:1” TreeSet is more efficient than SortedSet",
 opt:2” SortedSet is more efficient than TreeSet",
 opt:3” TreeSet is an interface; SortedSet is a concrete class",
 opt:4” SortedSet is an interface; TreeSet is a concrete class",
 ans: "d", 
}], 
[{ 
q: "39. What happens if two threads simultaneously modify TreeSet?",
 opt:1” ConcurrentModificationException is thrown",
 opt:2” Both threads can perform action successfully",
 opt:3” FailFastException is thrown",
 opt:4” IteratorModificationException is thrown",
 ans: "a", 
}], 
[{ 
q: "40. What is the unique feature of LinkedHashSet?",
 opt:1” It is not a valid class",
 opt:2” It maintains the insertion order and guarantees uniqueness",
 opt:3” It provides a way to store key values with uniqueness",
 opt:4” The elements in the collection are linked to each other",
 ans: "b",
}]
[{
q: "41. Which of these standard collection classes implements a linked list data structure?",
 opt:1” AbstractList",
 opt:2” LinkedList",
 opt:3” HashSet",
 opt:4” AbstractSet",
 ans: "b", 
}], 
[{ 
q: "42. Which of these classes implements Set interface?",
 opt:1” ArrayList",
 opt:2” HashSet",
 opt:3” LinkedList",
 opt:4” DynamicList",
 ans: "b", 
}], 
[{ 
q: "43. Which of these method is used to add an element to the start of a LinkedList object?",
 opt:1” add()",
 opt:2” first()",
 opt:3” AddFirst()",
 opt:4” addFirst()",
 ans: "d", 
}], 
[{ 
q: "44. Which of these method of HashSet class is used to add elements to its object?",
 opt:1” add()",
 opt:2” Add()",
 opt:3” addFirst()",
 opt:4” insert()",
 ans: "a", 
}], 
[{ 
q: "45. Which of these methods can be used to delete the last element in a LinkedList         object?",
 opt:1” remove()",
 opt:2” delete()",
 opt:3” removeLast()",
 opt:4” deleteLast()",
 ans: "c", 
}], 
[{ 
q: "46. Which of this method is used to change an element in a LinkedList Object?",
 opt:1” change()",
 opt:2” set()",
 opt:3” redo()",
 opt:4” add()",
 ans: "b", 
}], 
[{ 
q: "47. What will be the output of the following Java code snippet?
    import java.util.*;
    class Linkedlist 
    {
        public static void main(String args[]) 
        {
            LinkedList obj = new LinkedList();
            obj.add("A");
            obj.add("B");
            obj.add("C");
            obj.addFirst("D");
            System.out.println(obj);
        }
    }",
 opt:1” [A, B, C]",
 opt:2” [D, B, C]",
 opt:3” [A, B, C, D]",
 opt:4” [D, A, B, C]",
 ans: "d",   
}], 
[{ 
q: "48. What will be the output of the following Java program?
    import java.util.*;
    class Linkedlist 
    {
        public static void main(String args[]) 
        {
            LinkedList obj = new LinkedList();
            obj.add("A");
            obj.add("B");
            obj.add("C");
            obj.removeFirst();
            System.out.println(obj);
        }
    }",
 opt:1” [A, B]",
 opt:2” [B, C]",
 opt:3” [A, B, C, D]",
 opt:4” [A, B, C]",
 ans: b", 
}], 
[{ 
q: "49. What will be the output of the following Java program?
    import java.util.*;
    class Output 
    {
        public static void main(String args[]) 
        {
            HashSet obj = new HashSet();
            obj.add("A");
            obj.add("B");
            obj.add("C");
            System.out.println(obj + " " + obj.size());
        }
    }",
 opt:1” ABC 3",
 opt:2” [A, B, C] 3",
 opt:3” ABC 2",
 opt:4” [A, B, C] 2",
 ans: "b", 
}], 
[{ 
q: "50. What will be the output of the following Java program?
    import java.util.*; 
    class Output 
    {
        public static void main(String args[]) 
        { 
            TreeSet t = new TreeSet();
            t.add("3");
            t.add("9");
            t.add("1");
            t.add("4");
            t.add("8"); 
            System.out.println(t);
        }
    }",
 opt:1” [1, 3, 5, 8, 9]",
 opt:2” [3, 4, 1, 8, 9]",
 opt:3” [9, 8, 4, 3, 1]",
 opt:4” [1, 3, 4, 8, 9]",
 ans: "d", 
}],
[{rollNum:"IT2K17 - 03"}],
]]






