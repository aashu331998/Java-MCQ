[[
[{
q: "1.Which of the following Collection are synchronized by nature ?",

opt1:"Vector"
opt2:"SortedSet"
opt3:"Hashtable"
opt4:"HashMap"
ans:"4"
}]

[{  
q: "2. Which of the following implementation will you use if you were to insert elements at 
any position in the collection ?",

opt1:"ArrayList"
opt2:"LinkedList"
opt3:"Vector"
opt4:"Stack"
ans:"2"
}]

[{

q: "3.If you were to store objects into an implementation of List which happens only once in the entire lifecycle of the product,but reading these objects inside the List implementation is quite high,then  which one would  you use ?",

opt1:"Vector"
opt2:"LinkedList"
opt3:"ArrayList"
opt4:"Queue"
ans:"3"
}]

[{
q:"How to make a collection read only?",
opt1:"Collections.unmodifiableList(list)"
opt2:"Collections.unmodifiableSet(set)"
opt3:"Collections.unmodifiableMap(map)"
opt4:"All of the above"
ans:"4"
}]

[{
q:"5.Suppose that you would like to create an instance of a new Map that has an iteration order that is the same as the iteration order of an existing instance of a Map. Which concrete implementation of the Map interface should be used for the new instance?",

opt1:"TreeMap"
opt2:"HashMap"
opt3:"LinkedHashMap"
opt4:"The answer depends on the implementation of the existing instance."
ans:"3"
}]

[{
q:"6.Which class does not override the equals() and hashCode() methods, inheriting them directly from class Object?"

opt1:"java.lang.String"
opt2:"java.lang.Double"
opt3:"java.lang.StringBuffer"
opt4:"java.lang.Character"
ans:"3"
}]

[{
q:"7.Which interface does java.util.Hashtable implement?"

opt1:"Java.util.Map"
opt2:"Java.util.List"
opt3:"Java.util.HashTable"
opt4:"Java.util.Collection"
ans:"1"
}]
[{
q:"8.What will be the output of the program?"
TreeSet map = new TreeSet();
map.add("one");
map.add("two");
map.add("three");
map.add("four");
map.add("one");
Iterator it = map.iterator();
while (it.hasNext() ) 
{
    System.out.print( it.next() + " " );
}
opt1:"one three two four"
opt2:"three two four one"
opt3:"four one three two"
opt4:"None"
ans:"3"
}]

[{
q:"9.Which statement is true for the class java.util.HashSet?""

opt1:"The elements in the collection are ordered."
opt2:"The collection is guaranteed to be immutable.""
opt3:"The elements in the collection are guaranteed to be unique."
opt4:"The elements in the collection are accessed using a unique key."
ans:"3"
}]

[{
q:"10.Which of the following is not true in case of a WeakHashMap?"
opt1: "An entry in WeakHashMap is automatically removed when it is no longer in use."
opt2:  "WeakHashMap doesn't allow null keys and null values."
opt3: "WeakHashMap is a Hash table based implementation of the Map interface with weak keys."
opt4: "WeakHashMap is a class present in java.util package."
ans:"2"
}]

[{
q:"11.Which of the following is a correct difference between List and Set?"

opt1: "List maintains no order whereas Set maintains ascending order."
opt2: "List contain only unique elements whereas Set can contain duplicate elements."
opt3: "List can hold duplicate elements while Set includes only unique elements."
opt4: "None"
ans:"3"
}]

[{
q:"12.When would you choose to use ArrayList over LinkedList in an application?"

opt1: "ArrayList is preferred when there is growing need of merging or sorting operations."
opt2: "ArrayList is preferred when there are frequent insertions or deletions required in the application."
opt3: "ArrayList is preferred when there is more demand for get via index operations."
opt4: "None
ans:"3"
}]

[{
q:"13.Is it possible to define a Set as readOnly, if yes then how?"

opt1:"No"
opt2:"None"
opt3:"Yes, use Collections.unmodifiableSet(Set s)"
opt4:"Yes, use Collections.readonlySet(Set s)"
ans:"3"
}]

[{
q:"14.Which of the following is a correct difference between HashMap and Hashtable?""

opt1:"long"
opt2:"HashMap can contain duplicate elements whereas the Hashtable contains only unique elements."
opt3:"HashMap is not synchronized while the Hashtable is synchronized"
opt4:"HashMap contains only values whereas Hashtable contains key and values both."
ans:"3"
}]

[{
q:"15.Which of the following is a correct difference between ArrayList and Vector?"

opt1:ArrayList is not a legacy class while Vector is the legacy"
opt2:"ArrayList increases its size by doubling the array size while Vector increases by 50% of the array size."
opt3:"None"
opt4:"ArrayList is synchronized while Vector is not."
ans:"1"
}]

[{
q:"16.)Which of the following is not true for the UnsupportedOperationException?"

opt1:"This exception implies that the requested operation is not supported."
opt2:"It occurs if you call add() or remove() method on the readOnly collection."
opt3:"It occurs if a method is not found in the underlying collection."
opt4:"None"
ans:"3"
}]

[{
q:"17.)Which of the following method you need to override for using an object as key in a HashMap?"

opt1:"hashValue()"
opt2:"hashCode()"
opt3:"None"
opt4:"hashKey()"
ans:"2"
}]

[{
q:"18.)What is the design pattern followed by Iterator?"

opt1:"None"
opt2:"Iterator design pattern"
opt3:"Factory design pattern"
opt4:"Observer design pattern"
ans:"2"
}]

[{
q:"19.)Which of the following is a correct method to convert the array of strings into a list?"

opt1:"Arrays class toList() method"
opt2:"Arrays class asList() method"
opt3:"None"
opt4:"Arrays class doList() method"
ans:"2"
}]

[{
q:"20.)Which of the following is not true for the IdentityHashMap?"

opt1:"In IdentityHashMap, two keys k1 and k2 are considered equal if and only if (k1==k2)"
opt2:"IdentityHashMap is a class present in java.util package."
opt3:"IdentityHashMap is synchronized."
opt4:"IdentityHashMap implements the Map interface with a hash table."
ans:"3"
}]

[{
q:"21.)What is the correct difference between HashMap and TreeMap?"

opt1:"None"
opt2:"HashMap maintains no order but TreeMap maintains ascending order"
opt3:"HashMap contains only values whereas TreeMap contains key and values both"
opt4:"HashMap can contain duplicate elements whereas TreeMap contains only unique elements."
ans:"2"
}]

[{
q:"22.)What do you understand of hash-collision in a Hashtable?"

opt1:"If two same keys have the different hash value then it leads to hash-collision"
opt2:"If two same keys have the same hash value then it leads to hash-collision"
opt3:"If two different keys have the same hash value then it leads to hash-collision"
opt4:"None"
ans:"3"
}]

[{
q:"23.)Which of the following is a valid difference between Set and Map?"

opt1:"Set doesn't maintain any order whereas Map maintains ascending order"
opt2:"Set can contain duplicate elements whereas Map contains only unique elements"
opt3:"Set contains only values whereas Map contains key and values both."
opt4:"None"
ans:"3"
}]

[{
q:"24.)Which of the following is a correct difference between the Iterator and ListIterator?"

opt1:"Iterator traverses back and forth while the ListIterator traverses the elements in forward direction"
opt2:"Iterator traverses the elements only in forward direction whereas the ListIterator traverses back and forth"
opt3:"Iterator traverses the elements in backward direction while the ListIterator moves in forward direction"
opt4:"None"
ans:"2"
}]

[{
q:"25.)What is the default value of load factor in a hashing based collection?"

opt1:"0.75"
opt2:"0.55"
opt3:"0.65"
opt4:"0.70"
ans:"1"
}]

[{
q:"26.)Which of the following is a correct difference between the Iterator and Enumeration?"

opt1:"Iterator can traverse legacy and non-legacy containers whereas the Enumeration can traverse only legacy containers"
opt2:"None"
opt3:"Enumeration is fail-fast while Iterator is not fail-fast"
opt4:"Iterator is faster than Enumeration."
ans:"1"
}]

[{

q:"27.)Which of the following is not true for a generic collection?"

opt1:"Generic collection doesn't require typecasting"
opt2:"None"
opt3:"Generic collection is typesafe and checked at compile time"
opt4:"Generic collection is not mutable"
ans:"4"
}]

[{
q:"28.)List, Set and Queue __________ Collection."

opt1:"extends"
opt2:"implements"
opt3:"both of the above"
opt4:"none of the above"
ans:"1"
}]

[{
q:"29.)Which of the following is legacy class in java?"

opt1:"Arraylist"
opt2:"Vector"
opt3:"Hashtable"
opt4:"Only B & C"
ans:"4"
}]

[{
q:"30.)Iterator and ListIterator can traverse over"

opt1:"lists"
opt2:"sets"
opt3:"maps"
opt4:"All of the above"
ans:"1"
}]

[{
q:"31.)Pick the odd one out among the following:"
opt1:"Arraylist"
opt2:"LinkedList"
opt3:"HashSet"
opt4:"Hashtable"
ans:"4"
}]

[{
q:"32.)HashTable internally uses following technique for insertion and retrieval of records?"

opt1:"Serializing"
opt2:"Type-casting"
opt3:"Randomizing"
opt4:"Hashing"
ans:"4"
}]

[{
q:"33.)Which among the following statement is/are true?

1. Hastable is synchronized.

2. HashMap is not synchronized."

opt1:"Only 1"
opt2:"Only 2"
opt3:"Both 1 & 2"
opt4:"None of the above"
ans:"3"
}]
[{
q:"34.)What will be the output of the following program?

import java.util.*;

public class CollectionsTest {

    public static void main(String[] args) {
        List<A> l = new ArrayList<A>();
        l.add(new A(5, 4));
        l.add(l.get(0));
        l.add(new A(6, 0));
        l.add(new A(5, 4));
        l.add(new A(6));
        Set<A> s = new HashSet<A>();
        s.addAll(l);
        System.out.print("l = " + l.size() + " s = " + s.size());
    }
}

class A {
    int i, j;
    public A(int i, int j) { this.i = i; this.j = j; }
    public A(int i) { this.i = i; }"
	
opt1:"l = 5 s = 4"
opt2:"l = 5 s = 5"
opt3:"l = 3 s = 3"
opt4:"l = 5 s = 3"
ans:"1"
}]

[{
q:"35.)What values will hashSet contain at the end of the program?

import java.util.HashSet;

public class HashRetain
{
    public static void main(String Str[])
    {
        HashSet<String> hashSet = new HashSet<String>();
        hashSet.add("A");
        hashSet.add("B");
        hashSet.add("C");
        hashSet.add("D");
        hashSet.add("E");

        HashSet<String> subSet = new HashSet<String>();
        subSet.add("E");
        subSet.add("B");
        subSet.add("A");
        subSet.add("F");
        hashSet.retainAll(subSet);
    }
}"

opt1:"A, B, C, D, E, F"
opt2:"A, B, E"
opt3:"C, D"
opt4:"A, B, E, F"

ans:"2"
}]

[{
q:"36.)Predict Output:
import java.util.*;
public class MyNameIsKhan {
    private final String first, last;
    public MyNameIsKhan(String first, String last) {
        this.first = first;
        this.last = last;
    }
    public boolean equals(Object o) {
        if (!(o instanceof MyNameIsKhan))
            return false;
        MyNameIsKhan n = (MyNameIsKhan) o;
        return n.first.equals(first) || n.last.equals(last);
    }
    public static void main(String[] args) {
        Set<MyNameIsKhan> s = new HashSet<MyNameIsKhan>();
        s.add(new MyNameIsKhan("Shahrukh", "Khan"));
        System.out.println(s.contains(new MyNameIsKhan("Shahrukh", "Khan")));
    }
}"

opt1:"false false"
opt2:"true true"
opt3:"true"
opt4:"false"
ans:"3"
}]

[{
q:"37.)What will be the output of following program?

import java.util.*;
public class Names {
    static String s;
    public Names(String s) {
        Names.s = s;
    }
    public static void main(String[] args) {
        HashSet<Object> hs = new HashSet<Object>();
        Names ws1 = new Names("pranavi");
        Names ws2 = new Names("madhavi");
        String s1 = new String("jahnavi");
        String s2 = new String("vyshnavi");
        String s3 = new String("vyshnavi");
        hs.add(ws1);
        hs.add(ws2);
        hs.add(s1);
        hs.add(s2);
        hs.add(s3);
        System.out.println(hs.size());
    }
}"

opt1:"3"
opt2:"4"
opt3:"7"
opt4:"Some other output"
ans:"2"
}]

[{
q:"38.)Which of the following is incorrect?

X: Set can contain duplicate values but List does not allow. List allows only unique elements.
Y: List allows retrieval of data to be in same order as it is inserted but Set does not ensure the sequence in which the data can be retrieved (except HashSet)."

opt1:"X only"
opt2:"Y only"
opt3:"Both are correct"
opt4:"Both are incorrect"

ans:"1"
}]

[{
q:"39.)What will be the output of the following program?

import java.util.LinkedHashSet;
public class GetSize {
    public static void main(String args[]) {
        LinkedHashSet linkedset = new LinkedHashSet(10);
        linkedset.add("paper");
        linkedset.add("pen");
        linkedset.add("pencil");
        linkedset.add("scale");
        System.out.println("Capacity of linkedset is : " + linkedset.size());
    }
}"

opt1:"Capacity of linkedset is : 4"
opt2:"Capacity of linkedset is : 10"
opt3:"Capacity of linkedset is : 16"
opt4:"Compilation Error or Runtime Error"
ans:"1"
}]

[{
q:"40.)What will be the output of the following program?

import java.util.*;
public class GuessTheOutput {
    public static void main(String args[]) {
        Set<GuessTheOutput> set = new TreeSet<GuessTheOutput>();
        set.add(new GuessTheOutput());//LINE A
        set.add(new GuessTheOutput());//LINE B
        set.add(new GuessTheOutput());
        System.out.println(set);
    }
}"

opt1:"Some output will print"
opt2:"Compile and runs successfully but output will not produce"
opt3:"Compilation successfully but Runtime Error will occurs"
opt4:"Compilation Error"
ans:"3"
}]

[{
q:"41.)What will be the output of the following program?

import java.util.*;
public class Cloning {
    public static void main(String[] args) {
        TreeSet tree = new TreeSet();
        tree.add("Roots");
        tree.add("Stem");
        tree.add("Branchs");
        TreeSet newtree = (TreeSet) tree.clone();
        newtree.add("Leaves");
        System.out.println(newtree);
    }
} "

opt1:"[Roots, Stem, Branchs, Leaves]"
opt2:"[Branchs, Leaves, Roots, Stem]"
opt3:"[Roots, Stem, Branchs]"
opt4:"Compilation Error or Runtime Error"

ans:"2"
}]
[{
q:"42.) Which of these is an incorrect form of using method max() to obtain a maximum element?"
opt1:"max(Collection c)"
opt2:" max(Collection c, Comparator comp)"
opt3:"max(Comparator comp)"
opt4:"max(List c)"
ans:"3"
}]
[{
q:"43.)Which of these methods can randomize all elements in a list?"
opt1:"rand()"
opt2:"randomize()"
opt3:"shuffle()"
opt4:"ambiguous()"
ans:"3"
}]

[{
q:"44.)Which of these methods can convert an object into a List?"
opt1:"SetList()"
opt2:"ConvertList()"
opt3:"singletonList()"
opt4:"CopyList()"
ans:"3"
}]

[{
q:"45.)What is the output of following Java Program?"
import java.util.ArrayList; 
class Demo { 
public void show() 
    { 
        ArrayList<Integer> list = new ArrayList<Integer>(); 
        list.add(4); 
        list.add(7); 
        list.add(1); 
        for (int number : list) { 
            System.out.print(number + " "); 
        } 
    } 
} public class Main { 
public static void main(String[] args) 
    { 
        Demo demo = new Demo(); 
        demo.show(); 
    } 
} "
opt1:" Compilation Error"
opt2:"4 7 1"
opt3:"1 4 7"
opt4:"None"

ans:"2"
}]

[{
q:"46.)Why were adhoc classes not reliable?"
opt1:"Couldn't be designed"
opt2:"Couldn't be extended"
opt3:"A and B"
opt4:"None"

ans:"3"
}]

[{
q:"47.)What is the one feature of Algorithms that makes it available for all Collections?"
opt1:"They are easy to use"
opt2:"They are reliable"
opt3:"They are defined as static methods"
opt4:"All the above"
ans:"4"
}]
[{
q:"48.)What would Object[] toArray() do?"
opt1:"Would return an array"
opt2:"Would return an object"
opt3:"Would return an array of objects"
opt4:"None"
ans:"3"
}]
[{
q:"49.)What is the output of following Java Program?
class Demo { 
public void show() 
    { 
        LinkedList<String> list = new LinkedList<String>(); 
        list.add("Element1"); // line 6 
        list.add("Element2"); 
        System.out.print(list.getFirst()); // line 8 
    } 
} public class Main { 
public static void main(String[] args) 
    { 
        Demo demo = new Demo(); 
        demo.show(); 
    } 
} "
opt1:" Element1:"
opt2:"Compilation Error at line 8"
opt3:"Runtime Error"
opt4:"None"

ans:"1"
}]

[{
q:"50.What is the Output of following Java Program?

import java.util.LinkedList; 
  
class Demo { 
public void show() 
    { 
        LinkedList<String> list = new LinkedList<String>(); 
  
        System.out.print(list.getFirst()); 
    } 
} public class Main { 
public static void main(String[] args) 
    { 
        Demo demo = new Demo(); 
        demo.show(); 
    } 
} "
opt1:"null"
opt2:"IndexOutOfBoundException"
opt3:"NoSuchElementException"
opt4:"None of the above"

ans:"3"
}]
]]
IT-2k17-49








