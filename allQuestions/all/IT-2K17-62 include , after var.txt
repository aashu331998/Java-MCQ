[[
[{ 
q:"1. Declare and construct an ArrayList with an initial capacity of 20 references to Object:",
opt1:"   Object list(20) = new ArrayList() ;",
opt2:"   ArrayList list[20] = new ArrayList() ;",
opt3:"   ArrayList[Object] list = new ArrayList(20) ;",
opt4:"   ArrayList<Object> list = new ArrayList<Object>(20) ;",
ANS "4",
}],

[{ 
q:"2. Examine the following code
ArrayList<String> list = new ArrayList<String>(10) ;
list.add( "Ann" );
list.add( "Bob" );
list.add( "Eve" );
After the code has executed, what is the capacity of list? What is its size?",
opt1:"   3, 3",
opt2:"   3, 10",
opt3:"   10, 3",
opt4:"   10, 10",
ANS "2",
}],

[{ 
q:"3. Examine the following code
ArrayList<String> list = new ArrayList<String>(10) ;
list.add( "Andy" );
list.add( "Bart" );
list.add( "Carl" );
list.add( 0, "Eve" );
What element will be at index 2 of the list?",
opt1:"   Eve",
opt2:"   Andy",
opt3:"   Bart",
opt4:"   carl",
ANS "3",
}],

[{ 
q:"4. Examine the following code
ArrayList<String> list = new ArrayList<String>() ;
list.add( "Andy" );
list.add( "Bart" );
list.add( "Carl" );
list.add( "Doug" );
list.add( "Elmo" );
Which of the following will replace the element "Carl" with "Zoltan" ?",
opt1:"   list[2] = "Zoltan" ;",
opt2:"   list.set( "Zoltan", "Carl" );",
opt3:"   list.add( "Zoltan", list.indexOf("Carl") );",
opt4:"   list.set( list.indexOf("Carl"), "Zoltan" );",
ANS "4",
}],

[{ 
q:"5. Examine the following code 
ArrayList<String> list = new ArrayList<String>() ;
list.add( "Andy" );
list.add( "Bart" );
list.add( "Carl" );
list.add( "Doug" );
list.add( "Elmo" );
Which of the following will change the list so that Elmo is at the 4th position?",
opt1:"   list.add( 3, "Oscar" ) ;",
opt2:"   list.add( 4, "Oscar" ) ;",
opt3:"   list.set( 3, "Oscar" ) ;",
opt4:"   list.set( 4, "Oscar" ) ;",
ANS "3",
}],

[{ 
q:"6. Examine the following code
list.add( "Andy" );
list.add( "Bart" );
list.add( "Carl" );
list.add( "Doug" );
list.add( "Elmo" );
Which of the following will change the list so that it looks like:

Andy
Bart
Doug
Elmo",
opt1:"   list.remove( 3 );",
opt2:"   list.remove( 2 );",
opt3:"   list.add( 2, null );",
opt4:"   list.set( list.indexOf( "Carl" ), "Doug" );",
ANS "1",
}],

[{ 
q:"7. Examine the following code 
ArrayList<String> list = new ArrayList<String>() ;

list.add( "Andy" );
list.add( "Bart" );
list.add( "Carl" );
list.add( "Doug" );
list.add( "Elmo" );
Which of the following will change the list so that it looks like:

Andy
Bart
Carl
Doug",
opt1:"   list.remove( list.size() );",
opt2:"   list.remove( list.size()-1 );",
opt3:"   list.remove( 5 );",
opt4:"   list.clear( "Elmo" );",
ANS "2",
}],

[{ 
q:"8. Examine the following code:
ArrayList<String> list = new ArrayList<String>() ;

list.add( "Andy" );
list.add( "Bart" );
list.add( "Carl" );
list.add( "Doug" );
list.add( "Elmo" );

Iterator iter = list.___________________;

while( iter.___________ )
  System.out.println( iter.___________ );
Fill in the blanks so that the list is printed.",
opt1:"   iterator()       hasNext()     next()",
opt2:"   iterator()       next()        nextElement()",
opt3:"   elements()       empty()       next()",
opt4:"   iterator()       more()        get()",
ANS "1",
}],

[{ 
q:"9. Examine the following code 
ArrayList<String> list = new ArrayList<String>() ;

list.add( "Andy" );
list.add( "Bart" );
list.add( "Carl" );
list.add( "Doug" );
list.add( "Elmo" );

while( ________ name : ___________ )
  System.out.println( ___________ );
Fill in the blanks so that the list is printed.",
opt1:"   String       list        name",
opt2:"   String       iterator()    next()",
opt3:"   int          String         name",
opt4:"   iterator()    String        list",
ANS "1",
}],

[{ 
q:"10. which of the following declarations would be appropriate for a list that is expected to contain integers?",
opt1:"   ArrayList<String> list = new ArrayList<String>() ;",
opt2:"   ArrayList<int> list = new ArrayList<int>() ;",
opt3:"   ArrayList<Integer> list = new ArrayList<Integer>() ;",
opt4:"   ArrayList list = new ArrayList() ;",
ANS "3",
}],

[{ 
q:"11. What is the interface implemented by a class (such as ArrayList) that implements the iterator() method?",
opt1:"   Iterator<E>",
opt2:"   Iterable",
opt3:"   All of these",
ANS "2",
}],

[{ 
q:"12. What is the interface implemented by an iterator object itself?",
opt1:"   Iterator<E>",
opt2:"   Iterable",
opt3:"   All of these",
ANS "1",
}],

[{ 
q:"13. What is true of classes that can be used with the enhanced for loop?",
opt1:"   All classes can use the enhanced for loop.",
opt2:"   Only ArrayList can use the enhanced for loop.",
opt3:"   Only ArrayList and arrays can use the enhanced for loop.",
opt4:"   Any class that implements Iterable can use the enhanced for loop.",
ANS "4",
}],


[{ 
q:"14. In Iterator, hasMoreElements() method of Enumeration has been changed to:",
opt1:"hasNextElement()",
opt2:"isNext()",
opt3:"hasNext()",
opt4:"name remains same",
ANS "1",
}],

[{ 
q:"15. TreeSet internally uses that one to store elements?",
opt1:"HashMap",
opt2:"LinkedHashMap",
opt3:"TreeMap",
opt4:"None of the above",
ANS "3",
}],

[{ 
q:"16. HashSet internally uses?",
opt1:"HashMap",
opt2:"LinkedHashMap",
opt3:"TreeMap",
opt4:"None of the above",
ANS "1",
}],

[{ 
q:"17. An attempt to add the null key to a TreeSet will result in:",
opt1:"Will compile",
opt2:"Compile time Exception",
opt3:"Error",
opt4:"Runtime - NullPointerException",
ANS "4",
}],

[{ 
q:"19. TreeSet maintains which order?",
opt1:"Ascending Order",
opt2:"Descending Order",
opt3:"Random Order",
opt4:"None of the above",
ANS "1",
}],

[{ 
q:"20. Enumeration returned by ArrayList is:",
opt1:"Fail-fast",
opt2:"Fail-safe",
opt3:"Both 1 and 2",
opt4:"None of the above",
ANS "1",
}],

[{ 
q:"21. LinkedHashMap permits:",
opt1:"One null key",
opt2:"Many null values",
opt3:"Both the above",
ANS "3",
}],

[{ 
q:"22. Hashtable permits:",
opt1:"Zero null value",
opt2:"One null key",
opt3:"Many null values",
opt4:"None of the above",
ANS "2",
}],

[{ 
q:"23. How are you able to sort given HashMap on basis of values?",
opt1:"Implement Comparator interface and override its compare method",
opt2:"It is not possible",
opt3:"Implement Comparator interface and override its compareTo method",
opt4:"Implement Comparator and Comparable interface",
ANS "4",
}],

[{ 
q:"24. The Comparator interface contains the method?",
opt1:"compareWith()",
opt2:"compareTo()",
opt3:"compare()",
opt4:"compareto()",
ANS "3",
}],

[{ 
q:"25. What will Collections.sort internally uses when number of elements are less than 7?",
opt1:"Insertion sort",
opt2:"Merge sort",
opt3:"Quick sort",
opt4:"Heap sort",
ANS "1",
}],

[{ 
q:"26. What do Collections.sort internally uses once a number of elements are greater than 7?",
opt1:"Insertion sort",
opt2:"Merge sort",
opt3:"Quick sort",
opt4:"Heap sort",
ANS "3",
}],

[{ 
q:"27. An attempt to add null key to a TreeMap will result in:",
opt1:"Compile time Exception",
opt2:"Error",
opt3:"Runtime - NullPointerException",
opt4:"Runtime Exception",
ANS "3",
}],

[{ 
q:"28. Which of those is synchronized and does not allow null elements?",
opt1:"Vector",
opt2:"CopyOnWriteArraySet",
opt3:"CopyOnWriteArrayList",
opt4:"ConcurrentSkipListSet",
ANS "4",
}],

[{ 
q:"29. Which of these is synchronised and isn't sorted by natural order?",
opt1:"EnumSet",
opt2:"LinkedList",
opt3:"ConcurrentSkipListSet",
opt4:"Vector",
ANS "4",
}],

[{ 
q:"30. In ListIterator, when a call to next() or previous(), if a call is made to set(E element) followed by add() or remove() what happens?",
opt1:"Compilation error",
opt2:"UnsupportedOperationException",
opt3:"ConcurrentModificationException",
opt4:"Compile time exception",
ANS "3",
}],
[{ 
q:"31. The Java compiler translates source code into?",
opt1:"Machine code",
opt2:"Assembly code",
opt3:"Byte code",
opt4:"JVM code",
ANS "3",
}],

[{ 
q:"32. Which of these interface is not a part of Java's collection framework?",
opt1:"List",
opt2:"Set",
opt3:"SortedMap",
opt4:"SortedList",
ANS "4",
}],

[{ 
q:"33. What is the output of this program?
import java.util.*;
class Output
{
 public static void main(String args[])
 {
  HashSet obj = new HashSet();
  obj.add("A");
  obj.add("B");
  obj.add("C");
  System.out.println(obj + " " + obj.size());
 }
}",
opt1:"ABC 3",
opt2:"[A, B, C] 3",
opt3:"ABC 2",
opt4:"[A, B, C] 2",
ANS "2",
}],

[{ 
q:"34. Which of these object stores association between keys and values?",
opt1:"Hash table",
opt2:"Map",
opt3:"Array",
opt4:"String",
ANS "2",
}],

[{ 
q:"35. What is the output of this program
import java.util.*;
        class Array {
            public static void main(String args[]) {
                int array[] = new int [5];
                for (int i = 5; i > 0; i--)
                    array[5 - i] = i;
                Arrays.sort(array);
                System.out.print(Arrays.binarySearch(array, 4));
            }
        }?",
opt1:"2",
opt2:"3",
opt3:"4",
opt4:"5",
ANS "2",
}],

[{ 
q:"36. Which of these method is used to add an element to the start of a LinkedList object?",
opt1:"add()",
opt2:"first()",
opt3:"addFirst()",
opt4:"AddFirst()",
ANS "3",
}],

[{ 
q:"37. Which statement is true for the Class java.util.HashSet?",
opt1:"The collection is guaranteed to be immutable.",
opt2:"The elements in the collection are unique.",
opt3:"The elements in the collection are ordered.",
opt4:"The elements in the collection are synchronized.",
ANS "2",
}],

[{ 
q:"38. Which of these standard collection classes implements a dynamic array?",
opt1:"AbstractList",
opt2:"LinkedList",
opt3:"ArrayList",
opt4:"AbstractSet",
ANS "3",
}],

[{ 
q:"39. Which of these classes implements Set interface?",
opt1:"ArrayList",
opt2:"HashSet",
opt3:"LinkedList",
opt4:"DynamicList",
ANS "2",
}],
q:"40. What will be the output of the following Java code? ",
import java.util.*; 
class vector  
{ 
 public static void main(String args[])  
   { 
            Vector obj = new Vector(4,2); 
           obj.addElement(new Integer(3)); 
            obj.addElement(new Integer(2)); 
            obj.addElement(new Integer(5)); 
            System.out.println(obj.capacity()); 
        } 

    } 

opt1:" 2 ",
opt2:" 3 ",
opt3:" 4 ",
opt4:" 6",
 Ans "3 ",

}], 
q:"41.  What is the name of a data member of class Vector which is used to store a number of elements in the vector?  ",
opt1:" length",
opt2:" elements",
opt3:" elementCount",
opt4:" capacity",
ans:"3",
}],

[{
q:"42.  Which of these methods is used to obtain an iterator to the start of collection? ",
opt1:" start()",
opt2:" begin()",
opt3:" iteratorSet()",
opt4:" iterator()",
ans:"4",
}],

[{
q:"43." Which of these interface declares core method that all collections will have?", 
opt1:" set",
opt2:" EventListner",
opt3:" Comparator",
opt4:" Collection",
ans:"4",
}],

[{
q:"44.  Which of these interface handle sequences? ",
opt1:" Set",
opt2:" List",
opt3:" Comparator",
opt4:" Collection",
ans:"2",
}],

[{
q:"45.Which of this interface must contain a unique element?",
opt1:" Set",
opt2:" List",
opt3:" Array",
opt4:" Collection",
ans:"1",
}],
[{
q:"46.What is default fill ratio for a HashSet?"

opt 1: "0.75"
opt 2: "1"
opt 3: "1.5"
opt 4: "0"
Ans : "1"
}],
[{
q:"47. The declaration static void rotate(List<?> 1,int d) rotates n elements of the list with time complexity of "
opt1:"O(n)",
opt2:"O(log n)",
opt3:"O(n^2)",
opt4:"O(1)",
ans:"1"
}],
[{
q:"48. The declaration LinkedList(Collection<? extendsE>elements) "
opt1:"add all elements from a collection to privious linked list",
opt2:"constructs only a linked list",
opt3:"constructs a linked list and adds all elements from a collection",
opt4:"None of these",
ans:"3"
}],
q:"49. The Collections class has method that produce "
opt1:"modifiable view of collections",
opt2:"unmodifiable view of collections",
opt3:"modifiable view of interfaces",
opt4:"Both opt1 and opt3",
ans:"2"
}],
[{ 
q:"50. To access the map from multiple threads we use "
opt1:"SynchronisedMap method",
opt2:"get method",
opt3:"set method",
opt4:"SynchroniseMap method",
ans:"1"
}],
],
[{rollNum:"IT-2k17-62"}]]
