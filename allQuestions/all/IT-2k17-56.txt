[[
[{q:"1.Which collection class allows you to grow or shrink its size and provides indexed access to its elements, but whose methods are not synchronized?",
opt1:"java.util.HashSet",
opt2:"java.util.LinkedHashSet",
opt3:"java.util.List",
opt4:"java.util.ArrayList",
ans:"opt4"
}],
[{q:"2.You need to store elements in a collection that guarantees that no duplicates are stored and all elements can be accessed in natural order. Which interface provides that capability?",	
opt1:"java.util.Map",
opt2"java.util.Set",
opt3:"java.util.List",
opt4:"java.util.Collection",
ans:"opt2"
}],
[{q:"3.Which collection class allows you to associate its elements with key values, and allows you to retrieve objects in FIFO (first-in, first-out) sequence?",
opt1:"java.util.ArrayList",
opt2:"java.util.LinkedHashMap",
opt3:"java.util.HashMap",
opt4:"java.util.TreeMap",
ans:"opt2"
}],
[{q:"4.Which collection class allows you to access its elements by associating a key with an element's value, and provides synchronization?",
opt1:"java.util.SortedMap",
opt2:"	java.util.TreeMap",
opt3:"java.util.TreeSet",
opt4:"java.util.Hashtable",
ans:"opt4"
}],
[{q:"5.Which of the following statements about the hashcode() method are incorrect?

The value returned by hashcode() is used in some collection classes to help locate objects.
The hashcode() method is required to return a positive int value.
The hashcode() method in the String class is the one inherited from Object.
Two new empty String objects will produce identical hashcodes.",
opt1:"1 and 2",
opt2:"2 and 3",
opt3:"3 and 4",
opt4:"1 and 4",
ans:"opt2"
}],
[{q:"6.Which of these is not a interface in the Collections Framework?",
opt1:"collection",
opt2:"group",
opt3:"set",
opt4:"list",
ans:"opt2"
}],
[{q:"7.what is collection in java",
opt1:"A group of objects",
opt2:"A group of interfaces",
opt3:"A group of data types",
opt4:"A group of classes",
ans:"opt1"
}],
[{q:"8.Which of these methods deletes all the elements from invoking collection",
opt1:"delete()",
opt2:"clear()",
opt3:"refresh()",
opt4:"reset()",
ans:"opt2"
}],
[{q:"9.which of these is not a part of Java's collection framework?",
opt1:"list",
opt2:"sorted list",
opt3:"set",
opt4:"sorted map",
ans:"opt2"
}],
[{q:"10.which of these packages contain all the collection classes?",
opt1:"java.awt",
opt2:"java.net",
opt3:"java.util",
opt4:"java.lang",
ans:"opt3"
}],
[{q:"11.which of these interface declares core method that all collections will have?",
opt1:"set",
opt2:"EventListner",
opt3:"comparator",
opt4:"collection",
ans:"opt4"
}],
[{q:"12.which of these interface handle sequences?",
opt1:"set",
opt2:"list",
opt3:"comparator",
opt4:"collection",
ans:"opt2"
}],
[{q:"13.which of these interface must contain a unique element?",
opt1:"set",
opt2:"list",
opt3:"array",
opt4:"group",
ans:"opt1"
}],
[{q:"14.Which of these is Basic interface that all other interface inherits?",
opt1:"set",
opt2:"array",
opt3:"list",
opt4:"collection",
ans:"opt4"
}],
[{q:"15.Which of these is an incorrect form of using method max() to obtain maximum element?",
opt1:"max(Collection c)",
opt2:"max(Collection c, Comparator comp)",
opt3:"max(List c)",
opt4:"max(Comparator comp)",
ans:"opt4"
}],
[{q:"16.Which of these methods sets every element of a List to a specified object?",
opt1:"set()",
opt2:"fill()",
opt3:"complete()",
opt4:"add()",
ans:"opt2"
}],
[{q:"17.Which of these methods can randomize all elements in a list?",
opt1:"random()",
opt2:"randomize()",
opt3:"shuffle()",
opt4:"fill()",
ans:"opt3"
}],
[{q:"18.Which of these methods can convert an object into a List?",
opt1:"SetList()",
opt2:"ConvertList()",
opt3:"singletonList()",
opt4:"CopyList()",
ans:"opt3"
}],
[{q:"19.Which of these is true about unmodifiableCollection() method?",
opt1:" unmodifiableCollection() returns a collection that cannot be modified.",
opt2:" unmodifiableCollection() method is available only for List and Set.",
opt3:" unmodifiableCollection() is defined in Collection class.",
opt4:"none",
ans:"opt2"
}],
[{q:"20.Which of these is static variable defined in Collections?",
opt1:" EMPTY_SET",
opt2:" EMPTY_LIST",
opt3:"EMPTY_MAP",
opt4:"All of the mentioned",
ans:"opt4"
}],
[{q:"21.Which collection allows indexed access to its elements, but its methods are not synchronized?",
opt1:"HashSet",
opt2:"ArrayList",
opt3:"Vector",
opt4:"TreeMap",
ans:"opt2"
}],
[{q:"22.Elements of which of the collection can be traversed using Enumeration?",
opt1:"ArrayList",
opt2:"Vector",
opt3:"HashSet",
opt4:"TreeMap",
ans:"opt2"
}],
[{q:"23. What will be the output of the following class?
import java.util.*; 
class A
{
 public static void main(String[] args)
{
 HashSet<String> set=new HashSet<String>();
 set.add(null);
 set.add("One");
 for(String s: set)
   System.out.println(s); 
}
}
",
opt1:"NullPointerException",
opt2:"null,one",
opt3:"One",
opt4:"Two",
ans:"opt2"
}],
[{q:"24.Each tree based collection assumes its elements to be of --- type?",
opt1:"Serializable",
opt2:"Comparable",
opt3:"Comparator",
opt4:"Sortable",
ans:"opt2"
}],
[{q:"25.What will be the result of the following statement?
TreeSet set = Collections.singleton("one");",
opt1:"  A singleton set will be created. ",
opt2:"  ClassCastException will be thrown   ",
opt3:"The statement will not compile",
opt4:"return a value",
ans:"opt3"
}],
[{q:"26.What will be the output of the following class?
import java.util.*; 
class B
{
 public static void main(String[] args)
{
 ArrayList<String> list=new ArrayList<String>();
 list.add("One");
 list.add("Two");
 Collections.unmodifiableList(list);
 list.add("Three");
 for(String s: list)
   System.out.println(s); 
}
}
",
opt1:"UnsupportedOperationException will be thrown  ",
opt2:"two",
opt3:"one",
opt4:"One, Two, Three",
ans:"opt4"
}],
[{q:"27.Which method of the Iterator throws ConcurrentModificationException?",
opt1:"hasNext() ",
opt2:"next()",
opt3:"remove() ",
opt4:"return()",
ans:"opt2"
}],
[{q:"28. Which of the following collection is not of Iterable type?",
opt1:" ArrayList",
opt2:"Vector",
opt3:"TreeSet",
opt4:"HashMap",
ans:"opt4"
}],
[{q:"29.Which method is used by the contains() method of a list to search an element?",
opt1:"equals()",
opt2:"hashCode()",
opt3:"compareTo",
opt4:"hasNext()",
ans:"opt1"
}],
[{q:"30.Can elements of a Set be traversed without using Iterator?",
opt1:"Yes",
opt2:"No",
opt3:"Not always",
opt4:"depend on method",
ans:"opt1"
}],
[{q:"31.Wchich implementation of Set would you choose if the you want the iterator of set would geive you objects in the order it were inserted ?",
opt1:"LinkedHashSet",
opt2:"TreeSet",
opt3:"HashSet",
opt4:"Set",
ans:"opt1"
}],
[{q:"32.Enumeration is an interface helps to iterate collection,but it can't remove any element the collection it is iterating",
opt1:"yes",
opt2:"no",
ans:"opt1"
}],
[{q:"33.Which of the following implementation will you use if you were to insert elements at any position in the collection ?",
opt1:"ArrayList",
opt2:"LinkedList",
opt3:"Vector",
opt4:"TreeSet",
ans:"opt2"
}],
[{q:"34.What is the data structure that a Set uses to store its elements  ?",
opt1:"array",
opt2:"Object",
opt3:"Map",
opt4:"ArrayList",
ans:"opt3"
}],
[{q:"35.Suppose that you would like to create an instance of a new Map that has an iteration order that is the same as the iteration order of an existing instance of a Map. Which concrete implementation of the Map interface should be used for the new instance?",
opt1:"TreeMap",
opt2:"HashMap",
opt3:"LinkedHashMap",
opt4:"The answer depends on the implementation of the existing instance.",
ans:"opt3"
}],
[{q:"36.Which class is not the part of collection framework",
opt1:"SortedList",
opt2:"TreeMap",
opt3:"HashMap",
opt4:"LinkedHashMap",
ans:"opt1"
}],
[{q:"37.Using Comparable interface, we can sort the elements of:",
opt1:"String objects",
opt2:"Wrapper class objects, for example Integer, Long etc",
opt3:"User defined custom objects",
opt4:"all",
ans:"opt4"
}],
[{q:"38.What is output-
ArrayList<String> list = new ArrayList<>();
 
list.add("E");
list.add("A");
list.add("C");
list.add("B");
list.add("D");
 
Collections.sort(list);
 
System.out.println(list);
",
opt1:"[A, B, C, D, E]",
opt2:"[A, B, C, C, E]",
opt3:"[A, B, B, D, E]",
opt4:"[A, B, C, E, D]",
ans:"opt1"
}],
[{q:"39.PriorityBlockingQueue Features provides",
opt1:"It supplies blocking retrieval operations.",
opt2:"It does not allow NULL objects.",
opt3:"The objects of the priority queue are ordered by default in natural order.",
opt4:"all of the above",
ans:"opt4"
}],
[{q:"40.It allows the elements to be ordered in FIFO",
opt1:"PriorityBlockingQueue",
opt2:"ArrayBlockingQueue",
opt3:"none",
opt4:"Both",
ans:"opt2"
}],
[{q:"41.Which of below is false for HashMap",
opt1:"HashMap can contain duplicate keys.",
opt2:"HashMap allows multiple null values but only one null key.",
opt3:"HashMap is an unordered collection. It does not guarantee any specific order of the elements.",
opt4:"A value can be retrieved only using the associated key.",
ans:"opt1"
}],
[{q:"42.PriorityQueue Features",
opt1:"It does not allow NULL objects.",
opt2:"PriorityQueue is not thread safe",
opt3:"he objects of the priority queue are ordered by default in natural order.",
opt4:"all of the above",
ans:"opt4"
}],
[{q:"43.Which among the following stores element as key-value pair?",
opt1:"Arraylist",
opt2:"LinkedHashSet",
opt3:"TreeMap",
opt4:"TreeSet",
ans:"opt3"
}],
[{q:"44.Pick the odd one out among the following:",
opt1:"Arraylist",
opt2:"LinkedList",
opt3:"HashSet",
opt4:"Hashtable",
ans:"opt4"
}],
[{q:"45.Which of the following is true?

1. Iterator can traverse in both forward and backward directions.

2. ListIterator can traverse in both forward and backward directions.",
opt1:"only 1",
opt2:"only 2",
opt3:"Both 1&2",
opt4:"None of the above",
ans:"opt2"
}],
[{q:"46.Which of the following statement is false?

1. Hashmap doesn't allow null key at all.

2. Hashtable doesn't allow null key at all.",
opt1:"only 1",
opt2:"only 2",
opt3:"both",
opt4:"none",
ans:"opt1"
}],
[{q:"47.Which among the following statement is/are true?

1. Hastable is synchronized.

2. HashMap is not synchronized.",
opt1:"only 1",
opt2:"only 2",
opt3:"both",
opt4:"none",
ans:"opt3"
}],
[{q:"48.Arraylist, Linkedlist and vector are all ___________",
opt1:"interface",
opt2:"enums",
opt3:"class",
opt4:"Depends on implementation",
ans:"opt3"
}],
[{q:"49.The collection",
opt1:"extends Collections class",
opt2:"extends Iterable interface",
opt3:"implements Serializable interface",
opt4:"implements Traversable interface",
ans:"opt2"
}],
[{q:"50.The collection is a ____________",
opt1:"only class",
opt2:"framework and class",
opt3:"only interface",
opt4:"framework and interface",
ans:"opt4"
}],
]
[{Roll num:-"IT-2k17-56"}]]

